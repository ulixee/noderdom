import AwaitedHandler from '../AwaitedHandler';
import AwaitedPath from '../AwaitedPath';
import NodeAttacher from '../NodeAttacher';
import { INode, IGetRootNodeOptions } from '../interfaces/official';
import { ISuperNodeList, ISuperNode, ISuperDocument, ISuperElement } from '../interfaces/super';
import { INodeIsolate } from '../interfaces/isolate';
export declare const getState: (instance: INode) => INodeProperties, setState: (instance: INode, properties: Partial<INodeProperties>) => void, recordProxy: (proxy: INode, instance: INode) => void;
export declare const awaitedHandler: AwaitedHandler<INode>;
export declare const nodeAttacher: NodeAttacher<INode>;
export declare function NodeGenerator(): {
    new (): {
        readonly ATTRIBUTE_NODE: number;
        readonly CDATA_SECTION_NODE: number;
        readonly COMMENT_NODE: number;
        readonly DOCUMENT_FRAGMENT_NODE: number;
        readonly DOCUMENT_NODE: number;
        readonly DOCUMENT_POSITION_CONTAINED_BY: number;
        readonly DOCUMENT_POSITION_CONTAINS: number;
        readonly DOCUMENT_POSITION_DISCONNECTED: number;
        readonly DOCUMENT_POSITION_FOLLOWING: number;
        readonly DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: number;
        readonly DOCUMENT_POSITION_PRECEDING: number;
        readonly DOCUMENT_TYPE_NODE: number;
        readonly ELEMENT_NODE: number;
        readonly ENTITY_NODE: number;
        readonly ENTITY_REFERENCE_NODE: number;
        readonly NOTATION_NODE: number;
        readonly PROCESSING_INSTRUCTION_NODE: number;
        readonly TEXT_NODE: number;
        readonly baseURI: Promise<string>;
        readonly childNodes: ISuperNodeList;
        readonly firstChild: ISuperNode;
        readonly isConnected: Promise<boolean>;
        readonly lastChild: ISuperNode;
        readonly nextSibling: ISuperNode;
        readonly nodeName: Promise<string>;
        readonly nodeType: Promise<number>;
        readonly nodeValue: Promise<string | null>;
        readonly ownerDocument: ISuperDocument;
        readonly parentElement: ISuperElement;
        readonly parentNode: ISuperNode;
        readonly previousSibling: ISuperNode;
        readonly textContent: Promise<string | null>;
        compareDocumentPosition(other: INodeIsolate): Promise<number>;
        contains(other: INodeIsolate | null): Promise<boolean>;
        getRootNode(options?: IGetRootNodeOptions | undefined): ISuperNode;
        hasChildNodes(): Promise<boolean>;
        isDefaultNamespace(namespace: string | null): Promise<boolean>;
        isEqualNode(otherNode: INodeIsolate | null): Promise<boolean>;
        isSameNode(otherNode: INodeIsolate | null): Promise<boolean>;
        lookupNamespaceURI(prefix: string | null): Promise<string | null>;
        lookupPrefix(namespace: string | null): Promise<string | null>;
        normalize(): Promise<void>;
        then<TResult1 = INode, TResult2 = never>(onfulfilled?: ((value: INode) => TResult1 | PromiseLike<TResult1>) | null | undefined, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | null | undefined): Promise<TResult1 | TResult2>;
    };
    readonly ATTRIBUTE_NODE: number;
    readonly CDATA_SECTION_NODE: number;
    readonly COMMENT_NODE: number;
    readonly DOCUMENT_FRAGMENT_NODE: number;
    readonly DOCUMENT_NODE: number;
    readonly DOCUMENT_POSITION_CONTAINED_BY: number;
    readonly DOCUMENT_POSITION_CONTAINS: number;
    readonly DOCUMENT_POSITION_DISCONNECTED: number;
    readonly DOCUMENT_POSITION_FOLLOWING: number;
    readonly DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: number;
    readonly DOCUMENT_POSITION_PRECEDING: number;
    readonly DOCUMENT_TYPE_NODE: number;
    readonly ELEMENT_NODE: number;
    readonly ENTITY_NODE: number;
    readonly ENTITY_REFERENCE_NODE: number;
    readonly NOTATION_NODE: number;
    readonly PROCESSING_INSTRUCTION_NODE: number;
    readonly TEXT_NODE: number;
};
export interface INodeProperties {
    awaitedPath: AwaitedPath;
    awaitedOptions: any;
    createInstanceName: string;
    readonly baseURI?: Promise<string>;
    readonly childNodes?: ISuperNodeList;
    readonly firstChild?: ISuperNode;
    readonly isConnected?: Promise<boolean>;
    readonly lastChild?: ISuperNode;
    readonly nextSibling?: ISuperNode;
    readonly nodeName?: Promise<string>;
    readonly nodeType?: Promise<number>;
    readonly nodeValue?: Promise<string | null>;
    readonly ownerDocument?: ISuperDocument;
    readonly parentElement?: ISuperElement;
    readonly parentNode?: ISuperNode;
    readonly previousSibling?: ISuperNode;
    readonly textContent?: Promise<string | null>;
}
export declare const NodePropertyKeys: string[];
export declare const NodeConstantKeys: string[];
