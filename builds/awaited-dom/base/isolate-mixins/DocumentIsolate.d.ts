import AwaitedHandler from '../AwaitedHandler';
import AwaitedPath from '../AwaitedPath';
import { IDocumentIsolate } from '../interfaces/isolate';
import { ISuperHTMLCollection, ISuperHTMLElement, ISuperElement, ISuperNodeList } from '../interfaces/super';
import { IDocumentType, IFeaturePolicy, IHTMLHeadElement, IDOMImplementation, ILocation, IDocumentReadyState, IVisibilityState } from '../interfaces/official';
export declare const getState: (instance: IDocumentIsolate) => IDocumentIsolateProperties, setState: (instance: IDocumentIsolate, properties: Partial<IDocumentIsolateProperties>) => void, recordProxy: (proxy: IDocumentIsolate, instance: IDocumentIsolate) => void;
export declare const awaitedHandler: AwaitedHandler<IDocumentIsolate>;
export default class DocumentIsolate implements IDocumentIsolate {
    get URL(): Promise<string>;
    get anchors(): ISuperHTMLCollection;
    get body(): ISuperHTMLElement;
    get characterSet(): Promise<string>;
    get compatMode(): Promise<string>;
    get contentType(): Promise<string>;
    get cookie(): Promise<string>;
    get designMode(): Promise<string>;
    get dir(): Promise<string>;
    get doctype(): IDocumentType;
    get documentElement(): ISuperElement;
    get documentURI(): Promise<string>;
    get domain(): Promise<string>;
    get embeds(): ISuperHTMLCollection;
    get featurePolicy(): IFeaturePolicy;
    get forms(): ISuperHTMLCollection;
    get fullscreenEnabled(): Promise<boolean>;
    get head(): IHTMLHeadElement;
    get hidden(): Promise<boolean>;
    get images(): ISuperHTMLCollection;
    get implementation(): IDOMImplementation;
    get lastModified(): Promise<string>;
    get links(): ISuperHTMLCollection;
    get location(): ILocation;
    get plugins(): ISuperHTMLCollection;
    get readyState(): Promise<IDocumentReadyState>;
    get referrer(): Promise<string>;
    get scripts(): ISuperHTMLCollection;
    get scrollingElement(): ISuperElement;
    get title(): Promise<string>;
    get visibilityState(): Promise<IVisibilityState>;
    exitFullscreen(): Promise<void>;
    exitPointerLock(): Promise<void>;
    getElementsByClassName(classNames: string): ISuperHTMLCollection;
    getElementsByName(elementName: string): ISuperNodeList;
    getElementsByTagName(qualifiedName: string): ISuperHTMLCollection;
    getElementsByTagNameNS(namespace: string | null, localName: string): ISuperHTMLCollection;
    hasFocus(): Promise<boolean>;
}
export interface IDocumentIsolateProperties {
    awaitedPath: AwaitedPath;
    awaitedOptions: any;
    readonly URL?: Promise<string>;
    readonly anchors?: ISuperHTMLCollection;
    readonly body?: ISuperHTMLElement;
    readonly characterSet?: Promise<string>;
    readonly compatMode?: Promise<string>;
    readonly contentType?: Promise<string>;
    readonly cookie?: Promise<string>;
    readonly designMode?: Promise<string>;
    readonly dir?: Promise<string>;
    readonly doctype?: IDocumentType;
    readonly documentElement?: ISuperElement;
    readonly documentURI?: Promise<string>;
    readonly domain?: Promise<string>;
    readonly embeds?: ISuperHTMLCollection;
    readonly featurePolicy?: IFeaturePolicy;
    readonly forms?: ISuperHTMLCollection;
    readonly fullscreenEnabled?: Promise<boolean>;
    readonly head?: IHTMLHeadElement;
    readonly hidden?: Promise<boolean>;
    readonly images?: ISuperHTMLCollection;
    readonly implementation?: IDOMImplementation;
    readonly lastModified?: Promise<string>;
    readonly links?: ISuperHTMLCollection;
    readonly location?: ILocation;
    readonly plugins?: ISuperHTMLCollection;
    readonly readyState?: Promise<IDocumentReadyState>;
    readonly referrer?: Promise<string>;
    readonly scripts?: ISuperHTMLCollection;
    readonly scrollingElement?: ISuperElement;
    readonly title?: Promise<string>;
    readonly visibilityState?: Promise<IVisibilityState>;
}
export declare const DocumentIsolatePropertyKeys: string[];
export declare const DocumentIsolateConstantKeys: never[];
