import { ISuperNode, ISuperNodeList, ISuperDocument, ISuperElement } from '../../base/interfaces/super';
import { IGetRootNodeOptions } from '../../base/interfaces/official';
import { ISuperNodeProperties } from '../../base/super-klasses/SuperNode';
export declare const getState: (instance: ISuperNode) => ISuperNodeProperties, setState: (instance: ISuperNode, properties: Partial<ISuperNodeProperties>) => void, recordProxy: (proxy: ISuperNode, instance: ISuperNode) => void;
declare const SuperNodeBaseClass: {
    new (): {
        [index: number]: ISuperElement;
        readonly ATTRIBUTE_NODE: number;
        readonly CDATA_SECTION_NODE: number;
        readonly COMMENT_NODE: number;
        readonly DOCUMENT_FRAGMENT_NODE: number;
        readonly DOCUMENT_NODE: number;
        readonly DOCUMENT_POSITION_CONTAINED_BY: number;
        readonly DOCUMENT_POSITION_CONTAINS: number;
        readonly DOCUMENT_POSITION_DISCONNECTED: number;
        readonly DOCUMENT_POSITION_FOLLOWING: number;
        readonly DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: number;
        readonly DOCUMENT_POSITION_PRECEDING: number;
        readonly DOCUMENT_TYPE_NODE: number;
        readonly ELEMENT_NODE: number;
        readonly ENTITY_NODE: number;
        readonly ENTITY_REFERENCE_NODE: number;
        readonly NOTATION_NODE: number;
        readonly PROCESSING_INSTRUCTION_NODE: number;
        readonly TEXT_NODE: number;
        readonly baseURI: Promise<string>;
        readonly childNodes: ISuperNodeList;
        readonly firstChild: ISuperNode;
        readonly isConnected: Promise<boolean>;
        readonly lastChild: ISuperNode;
        readonly nextSibling: ISuperNode;
        readonly nodeName: Promise<string>;
        readonly nodeType: Promise<number>;
        readonly nodeValue: Promise<string | null>;
        readonly ownerDocument: ISuperDocument;
        readonly parentElement: ISuperElement;
        readonly parentNode: ISuperNode;
        readonly previousSibling: ISuperNode;
        readonly textContent: Promise<string | null>;
        compareDocumentPosition(other: import("../../base/interfaces/isolate").INodeIsolate): Promise<number>;
        contains(other: import("../../base/interfaces/isolate").INodeIsolate | null): Promise<boolean>;
        getRootNode(options?: IGetRootNodeOptions | undefined): ISuperNode;
        hasChildNodes(): Promise<boolean>;
        isDefaultNamespace(namespace: string | null): Promise<boolean>;
        isEqualNode(otherNode: import("../../base/interfaces/isolate").INodeIsolate | null): Promise<boolean>;
        isSameNode(otherNode: import("../../base/interfaces/isolate").INodeIsolate | null): Promise<boolean>;
        lookupNamespaceURI(prefix: string | null): Promise<string | null>;
        lookupPrefix(namespace: string | null): Promise<string | null>;
        normalize(): Promise<void>;
        then<TResult1 = ISuperNode, TResult2 = never>(onfulfilled?: ((value: ISuperNode) => TResult1 | PromiseLike<TResult1>) | null | undefined, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | null | undefined): Promise<TResult1 | TResult2>;
        readonly localName: Promise<string>;
        readonly name: Promise<string>;
        readonly namespaceURI: Promise<string | null>;
        readonly ownerElement: ISuperElement;
        readonly prefix: Promise<string | null>;
        readonly specified: Promise<boolean>;
        readonly value: Promise<string>;
        readonly data: Promise<string>;
        readonly length: Promise<number>;
        substringData(offset: number, count: number): Promise<string>;
        readonly URL: Promise<string>;
        readonly anchors: import("../../base/interfaces/super").ISuperHTMLCollection;
        readonly body: import("../../base/interfaces/super").ISuperHTMLElement;
        readonly characterSet: Promise<string>;
        readonly compatMode: Promise<string>;
        readonly contentType: Promise<string>;
        readonly cookie: Promise<string>;
        readonly designMode: Promise<string>;
        readonly dir: Promise<string>;
        readonly doctype: import("../../base/interfaces/official").IDocumentType;
        readonly documentElement: ISuperElement;
        readonly documentURI: Promise<string>;
        readonly domain: Promise<string>;
        readonly embeds: import("../../base/interfaces/super").ISuperHTMLCollection;
        readonly featurePolicy: import("../../base/interfaces/official").IFeaturePolicy;
        readonly forms: import("../../base/interfaces/super").ISuperHTMLCollection;
        readonly fullscreenEnabled: Promise<boolean>;
        readonly head: import("../../base/interfaces/official").IHTMLHeadElement;
        readonly hidden: Promise<boolean>;
        readonly images: import("../../base/interfaces/super").ISuperHTMLCollection;
        readonly implementation: import("../../base/interfaces/official").IDOMImplementation;
        readonly lastModified: Promise<string>;
        readonly links: import("../../base/interfaces/super").ISuperHTMLCollection;
        readonly location: import("../../base/interfaces/official").ILocation;
        readonly plugins: import("../../base/interfaces/super").ISuperHTMLCollection;
        readonly readyState: Promise<import("../../base/interfaces/official").IDocumentReadyState>;
        readonly referrer: Promise<string>;
        readonly scripts: import("../../base/interfaces/super").ISuperHTMLCollection;
        readonly scrollingElement: ISuperElement;
        readonly title: Promise<string>;
        readonly visibilityState: Promise<import("../../base/interfaces/official").IVisibilityState>;
        exitFullscreen(): Promise<void>;
        exitPointerLock(): Promise<void>;
        getElementsByClassName: ((classNames: string) => import("../../base/interfaces/super").ISuperHTMLCollection) & ((classNames: string) => import("../../base/interfaces/super").ISuperHTMLCollection);
        getElementsByName(elementName: string): ISuperNodeList;
        getElementsByTagName: ((qualifiedName: string) => import("../../base/interfaces/super").ISuperHTMLCollection) & ((qualifiedName: string) => import("../../base/interfaces/super").ISuperHTMLCollection);
        getElementsByTagNameNS: ((namespace: string | null, localName: string) => import("../../base/interfaces/super").ISuperHTMLCollection) & ((namespace: string | null, localName: string) => import("../../base/interfaces/super").ISuperHTMLCollection);
        hasFocus(): Promise<boolean>;
        readonly publicId: Promise<string>;
        readonly systemId: Promise<string>;
        readonly attributes: import("../../base/interfaces/official").INamedNodeMap;
        readonly classList: import("../../base/interfaces/official").IDOMTokenList;
        readonly className: Promise<string>;
        readonly clientHeight: Promise<number>;
        readonly clientLeft: Promise<number>;
        readonly clientTop: Promise<number>;
        readonly clientWidth: Promise<number>;
        readonly id: Promise<string>;
        readonly innerHTML: Promise<string>;
        readonly outerHTML: Promise<string>;
        readonly part: import("../../base/interfaces/official").IDOMTokenList;
        readonly scrollHeight: Promise<number>;
        readonly scrollLeft: Promise<number>;
        readonly scrollTop: Promise<number>;
        readonly scrollWidth: Promise<number>;
        readonly shadowRoot: import("../../base/interfaces/official").IShadowRoot;
        readonly slot: Promise<string>;
        readonly tagName: Promise<string>;
        closest(selectors: string): ISuperElement;
        getAttribute(qualifiedName: string): Promise<string | null>;
        getAttributeNS(namespace: string | null, localName: string): Promise<string | null>;
        getAttributeNames(): Promise<Iterable<string>>;
        getAttributeNode(qualifiedName: string): Promise<import("../../base/interfaces/official").IAttr | null>;
        getAttributeNodeNS(namespace: string | null, localName: string): Promise<import("../../base/interfaces/official").IAttr | null>;
        getBoundingClientRect(): Promise<import("../../base/interfaces/official").IDOMRect>;
        getClientRects(): Promise<import("../../base/interfaces/official").IDOMRectList>;
        hasAttribute(qualifiedName: string): Promise<boolean>;
        hasAttributeNS(namespace: string | null, localName: string): Promise<boolean>;
        hasAttributes(): Promise<boolean>;
        hasPointerCapture(pointerId: number): Promise<boolean>;
        matches(selectors: string): Promise<boolean>;
        requestFullscreen(options?: import("../../base/interfaces/official").IFullscreenOptions | undefined): Promise<void>;
        requestPointerLock(): Promise<void>;
        scrollIntoView(arg?: boolean | import("../../base/interfaces/official").IScrollIntoViewOptions | undefined): Promise<void>;
        readonly autofocus: Promise<boolean>;
        readonly disabled: Promise<boolean>;
        readonly form: import("../../base/interfaces/official").IHTMLFormElement;
        readonly formAction: Promise<string>;
        readonly formEnctype: Promise<string>;
        readonly formMethod: Promise<string>;
        readonly formNoValidate: Promise<boolean>;
        readonly formTarget: Promise<string>;
        readonly labels: ISuperNodeList;
        readonly type: Promise<string>;
        readonly validationMessage: Promise<string>;
        readonly validity: Promise<import("../../base/interfaces/official").IValidityState>;
        readonly willValidate: Promise<boolean>;
        checkValidity: (() => Promise<boolean>) & (() => Promise<boolean>) & (() => Promise<boolean>) & (() => Promise<boolean>) & (() => Promise<boolean>);
        reportValidity: (() => Promise<boolean>) & (() => Promise<boolean>) & (() => Promise<boolean>) & (() => Promise<boolean>) & (() => Promise<boolean>);
        readonly accessKey: Promise<string>;
        readonly autoCapitalize: Promise<string>;
        readonly draggable: Promise<boolean>;
        readonly inert: Promise<boolean>;
        readonly innerText: Promise<string>;
        readonly lang: Promise<string>;
        readonly offsetHeight: Promise<number>;
        readonly offsetLeft: Promise<number>;
        readonly offsetParent: ISuperElement;
        readonly offsetTop: Promise<number>;
        readonly offsetWidth: Promise<number>;
        readonly spellcheck: Promise<boolean>;
        readonly translate: Promise<boolean>;
        click(): Promise<void>;
        readonly elements: import("../../base/interfaces/super").ISuperHTMLCollection;
        readonly accept: Promise<string>;
        readonly alt: Promise<string>;
        readonly autocomplete: Promise<string>;
        readonly checked: Promise<boolean>;
        readonly defaultChecked: Promise<boolean>;
        readonly defaultValue: Promise<string>;
        readonly dirName: Promise<string>;
        readonly height: Promise<number>;
        readonly indeterminate: Promise<boolean>;
        readonly inputMode: Promise<string>;
        readonly list: import("../../base/interfaces/super").ISuperHTMLElement;
        readonly max: Promise<string>;
        readonly maxLength: Promise<number>;
        readonly min: Promise<string>;
        readonly minLength: Promise<number>;
        readonly multiple: Promise<boolean>;
        readonly pattern: Promise<string>;
        readonly placeholder: Promise<string>;
        readonly readOnly: Promise<boolean>;
        readonly required: Promise<boolean>;
        readonly selectionDirection: Promise<string | null>;
        readonly selectionEnd: Promise<number | null>;
        readonly selectionStart: Promise<number | null>;
        readonly size: Promise<number>;
        readonly src: Promise<string>;
        readonly step: Promise<string>;
        readonly valueAsDate: Promise<any>;
        readonly valueAsNumber: Promise<number>;
        readonly width: Promise<number>;
        select: (() => Promise<void>) & (() => Promise<void>);
        setRangeText: ((replacement: string, start?: number | undefined, end?: number | undefined, selectionMode?: "end" | "preserve" | "select" | "start" | undefined) => Promise<void>) & ((replacement: string, start?: number | undefined, end?: number | undefined, selectionMode?: "end" | "preserve" | "select" | "start" | undefined) => Promise<void>);
        setSelectionRange: ((start: number, end: number, direction?: string | undefined) => Promise<void>) & ((start: number, end: number, direction?: string | undefined) => Promise<void>);
        stepDown(n?: number | undefined): Promise<void>;
        stepUp(n?: number | undefined): Promise<void>;
        readonly control: import("../../base/interfaces/super").ISuperHTMLElement;
        readonly htmlFor: Promise<string>;
        readonly label: Promise<string>;
        readonly defaultSelected: Promise<boolean>;
        readonly index: Promise<number>;
        readonly selected: Promise<boolean>;
        readonly text: Promise<string>;
        blur(): Promise<void>;
        focus(): Promise<void>;
        readonly options: import("../../base/interfaces/official").IHTMLOptionsCollection;
        readonly selectedIndex: Promise<number>;
        readonly selectedOptions: import("../../base/interfaces/super").ISuperHTMLCollection;
        item(index: number): ISuperElement;
        namedItem(name: string): import("../../base/interfaces/official").IHTMLOptionElement;
        [Symbol.iterator](): IterableIterator<ISuperElement>;
        readonly cols: Promise<number>;
        readonly rows: Promise<number>;
        readonly textLength: Promise<number>;
        readonly wrap: Promise<string>;
        setCustomValidity(error: string): Promise<void>;
        readonly nextElementSibling: ISuperElement;
        readonly previousElementSibling: ISuperElement;
        getElementById(elementId: string): ISuperElement;
        readonly childElementCount: Promise<number>;
        readonly children: import("../../base/interfaces/super").ISuperHTMLCollection;
        readonly firstElementChild: ISuperElement;
        readonly lastElementChild: ISuperElement;
        querySelector(selectors: string): ISuperElement;
        querySelectorAll(selectors: string): ISuperNodeList;
        readonly wholeText: Promise<string>;
        splitText(offset: number): Promise<import("../../base/interfaces/super").ISuperText>;
        createExpression(expression: string, resolver?: ((prefix: string | null) => string | null) | {
            lookupNamespaceURI(prefix: string | null): string | null;
        } | null | undefined): import("../../base/interfaces/official").IXPathExpression;
        evaluate(expression: string, contextNode: import("../../base/interfaces/isolate").INodeIsolate, resolver?: ((prefix: string | null) => string | null) | {
            lookupNamespaceURI(prefix: string | null): string | null;
        } | null | undefined, type?: number | undefined, result?: import("../../base/interfaces/official").IXPathResult | null | undefined): import("../../base/interfaces/official").IXPathResult;
    };
    readonly ATTRIBUTE_NODE: number;
    readonly CDATA_SECTION_NODE: number;
    readonly COMMENT_NODE: number;
    readonly DOCUMENT_FRAGMENT_NODE: number;
    readonly DOCUMENT_NODE: number;
    readonly DOCUMENT_POSITION_CONTAINED_BY: number;
    readonly DOCUMENT_POSITION_CONTAINS: number;
    readonly DOCUMENT_POSITION_DISCONNECTED: number;
    readonly DOCUMENT_POSITION_FOLLOWING: number;
    readonly DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: number;
    readonly DOCUMENT_POSITION_PRECEDING: number;
    readonly DOCUMENT_TYPE_NODE: number;
    readonly ELEMENT_NODE: number;
    readonly ENTITY_NODE: number;
    readonly ENTITY_REFERENCE_NODE: number;
    readonly NOTATION_NODE: number;
    readonly PROCESSING_INSTRUCTION_NODE: number;
    readonly TEXT_NODE: number;
};
export default class SuperNode extends SuperNodeBaseClass implements ISuperNode {
    constructor();
    get childNodes(): ISuperNodeList;
    get firstChild(): ISuperNode;
    get lastChild(): ISuperNode;
    get nextSibling(): ISuperNode;
    get ownerDocument(): ISuperDocument;
    get parentElement(): ISuperElement;
    get parentNode(): ISuperNode;
    get previousSibling(): ISuperNode;
    getRootNode(options?: IGetRootNodeOptions): ISuperNode;
}
export {};
